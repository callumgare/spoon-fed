auth {
  mode: basic
}

auth:basic {
  username: {{paprika-username}}
  password: {{paprika-password}}
}

script:pre-request {
  const { CompressionStream } = require('node:stream/web');
  const { TextEncoder } = require('node:util');
  const fs = require('node:fs');
  const path = require('node:path');
  const os = require('node:os');
  
  if (Array.isArray(req.req.data)) {
    await gzipRequestMultiPartEntries(req.req.data)
  }
  
  function interpolateVars(text) {
    return text.replaceAll(/\{\{([^}]+)\}\}/g, (match, group) => bru.getEnvVar(group))
  }
  
  async function gzipRequestMultiPartEntries(multiPartEntries) {
    for (const multiPartEntry of multiPartEntries) {
      const requestPrefixString = "SCRIPT GZIPS THIS:"
      if (
        multiPartEntry.type === "text" && 
        multiPartEntry.value.startsWith(requestPrefixString)
      ) {
        const payload = interpolateVars(
          multiPartEntry.value.substring(
            requestPrefixString.length
          )
        )
  
        filePath = path.join(
          os.tmpdir(),
          `bruno-gziped-request-${multiPartEntry.uid}`
        );
        await gzipStringToFile(payload, filePath)
        Object.assign(
          multiPartEntry,
          {
            type: "file",
            value: [filePath]
          }
        )
      }
    }
  }
  
  async function gzipStringToFile(input, filePath) {
    const encoder = new TextEncoder();
    const data = encoder.encode(input);
  
    const cs = new CompressionStream('gzip');
    const writer = cs.writable.getWriter();
    writer.write(data);
    writer.close();
  
    const reader = cs.readable.getReader();
    const chunks = [];
  
    while (true) {
      const { done, value } = await reader.read();
      if (done) break;
      chunks.push(value);
    }
  
    // Concatenate all chunks into a single Uint8Array
    const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);
    const combined = new Uint8Array(totalLength);
    let offset = 0;
    for (const chunk of chunks) {
      combined.set(chunk, offset);
      offset += chunk.length;
    }
  
    fs.writeFileSync(filePath, Buffer.from(combined));
    console.log(`Gzipped data saved to ${filePath}`);
  }
}
